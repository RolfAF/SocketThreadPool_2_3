package socketthreadmulti;

import java.io.*;
import java.text.*;
import java.net.*;

public class Server
{
    public static void main(String[] args) throws IOException
    {
        ServerSocket ss = new ServerSocket(5056);
        int threadCount = 0;
        while (threadCount < 10)
        {
            Socket s = null;
            try
            {
                s = ss.accept();
                System.out.println("A new client is connected : " + s);
                DataInputStream dis = new DataInputStream(s.getInputStream());
                DataOutputStream dos = new DataOutputStream(s.getOutputStream());
                System.out.println("Assigning new thread for this client");
                Thread t = new ClientHandler(s, dis, dos, threadCount);
                threadCount++;
                t.start();
            }
            catch (Exception e){
                s.close();
                e.printStackTrace();
            }
        }
    }
}

class ClientHandler extends Thread{
    DateFormat fordate = new SimpleDateFormat("yyyy/MM/dd");
    DateFormat fortime = new SimpleDateFormat("hh:mm:ss");
    final DataInputStream dis;
    final DataOutputStream dos;
    final Socket s;
    int threadCount;

    public ClientHandler(Socket s, DataInputStream dis, DataOutputStream dos, int threadCount){
        this.s = s;
        this.dis = dis;
        this.dos = dos;
        this.threadCount = threadCount;
    }

    @Override
    public void run(){
        String path = "/home/rolf/Desktop/2023_02/programacao_alto_desempenho/SocketThreadMulti/arquivosDNA";
        File file = new File(path+"/dna-"+threadCount+".txt");
        System.out.println("File: dna-"+threadCount+".txt");
        BufferedReader br;
        BufferedWriter bw;
        try {
            br = new BufferedReader(new FileReader(file));
            bw = new BufferedWriter(new FileWriter(path+"/comp-"+threadCount+".txt"));
            String st;
            while ((st = br.readLine()) != null){
                dos.writeUTF(st);
                String comp = dis.readUTF();
                bw.write(comp);
                bw.write("\n");
                Thread.currentThread();
                Thread.yield();
            }
            bw.close();
            dos.writeUTF("stop");
            this.s.close();
            System.out.println("Connection closed");
        } catch (IOException e) {
                e.printStackTrace();
        }
        try{
                this.dis.close();
                this.dos.close();
        }catch(IOException e){
                e.printStackTrace();
        }
    }
}
